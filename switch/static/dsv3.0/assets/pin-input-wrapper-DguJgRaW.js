import{S as u,r as l,g as h,i as p,k as o,a as n,j as s}from"./index-C2PWchud.js";import"./password-input-BAwTSazg.js";import"./InputMixin-CGm-oGk-.js";const d=class extends u{static get is(){return"pin-input"}static get properties(){return{params:{type:Object,value:{}},type:String,columnSize:{type:Array}}}getName(){return this.e.formName}validate(){if((this.e.required||this.required)&&!this.getValue())return new this.Validation(!1,this.e.name+" is Required");if((this.e.required||this.required)&&(this.getValue().length>this.e.max||this.getValue().length<this.e.min)){if(this.getValue().length>this.e.max)return new this.Validation(!1,this.e.name+" characters must not be more than "+this.e.max);if(this.getValue().length<this.e.min)return new this.Validation(!1,this.e.name+" characters must not be less than "+this.e.min)}return new this.Validation(!0,"valid")}firstUpdated(e){super.firstUpdated(e)}init(e,t){super.init(e,t),this.required=this.e.required||e.min&&e.min>0,this.value=e.defaultValue||""}};class a extends d{static get styles(){return[l(h),p`
				:host {
					display: block;
				}
			`]}constructor(){super(),this.name="",this.hint="",this.icon="",this.e=null}static get properties(){return{name:String,icon:String,hint:String,e:{type:Object}}}getInput(){return this.shadowRoot.querySelector("password-input")}getValue(){return this.getInput().value}onInputHandler(t){let i=t.detail.target.value;if(isNaN(i)){const r=i.split("").length-1;i=i.slice(0,r)}return this.value=i,this.dispatchEvent(new CustomEvent("on-input",{bubbles:!0,composed:!0,detail:t})),i}valid(t){this.getInput().setAttribute("validation",JSON.stringify({isValid:!0,validationMessage:""}))}invalid(t){this.getInput().setAttribute("validation",JSON.stringify({isValid:!1,validationMessage:t.validationMessage}))}render(){return o`
			<password-input .e=${this.e} .id=${"pinInput"} .value=${this.value} @on-input=${t=>t.details.target.value=this.onInputHandler(t)} .hint=${this.e&&this.e.details.hint} 
				.name=${this.e.name} .inputMode=${"numeric"} .minLength=${this.e.minLength} .maxLength=${this.e.maxLength}></password-input>
		`}}customElements.define(a.is,a);const f=({element:e})=>{const t=n.useRef(null);return n.useEffect(()=>{if(t.current&&e){const i=t.current;i.e=e}},[e]),s.jsx(s.Fragment,{children:e&&s.jsx("pin-input",{id:"pin-input",ref:t})})};export{f as default};
